app CaptnAI {
  wasp: {
    version: "^0.12.0"
  },
  title: "Capt‚Äôn.ai",
  head: [
        "<meta property='og:type' content='website' />",
        "<meta property='og:url' content='https://captn.ai' />", 
        "<meta property='og:description' content='Your AI-Powered Digital Marketing First Mate.' />",
        "<meta property='og:image' content='https://captn.ai/public-banner.png' />",
        "<meta name='twitter:image' content='https://captn.ai/public-banner.png' />", 
        "<meta name='twitter:image:width' content='800' />",
        "<meta name='twitter:image:height' content='400' />",
        "<meta name='twitter:card' content='summary_large_image' />",
        // you can put your analytics scripts here
        // "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.js'></script>",
        // plausible has script extension `script.local.js` for local development
        // "<script defer data-domain='<your-site-id>' src='https://plausible.io/js/script.local.js'></script>",
        // google analytics only needs one script and will automatically detect if you are in dev mode 
        // "<!-- Google tag (gtag.js) --><script>...</script>",
        "<script type='text/javascript'> (function(l) { if (l.search[1] === '/' ) { var decoded = l.search.slice(1).split('&').map(function(s) { return s.replace(/~and~/g, '&') }).join('?'); window.history.replaceState(null, null, l.pathname.slice(0, -1) + decoded + l.hash ); } }(window.location)) </script>",
        "<script async src='https://www.googletagmanager.com/gtag/js?id=G-NQN20RRZVD'></script>",
        "<script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-NQN20RRZVD');</script>",
  ],
  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      usernameAndPassword: {},
      google: {
        userSignupFields: import { userSignupFields } from "@src/server/auth/google.js",
        configFn: import { getConfig } from "@src/server/auth/google.js",
      },
      // email: {
      //   fromField: {
      //     name: "Open SaaS App",
      //     // make sure this address is the same you registered your SendGrid or MailGun account with!
      //     email: "me@example.com" 
      //   },
      //   emailVerification: {
      //     clientRoute: EmailVerificationRoute,
      //     getEmailContentFn: import { getVerificationEmailContent } from "@src/server/auth/email.js",
      //   },
      //   passwordReset: {
      //     clientRoute: PasswordResetRoute,
      //     getEmailContentFn: import { getPasswordResetEmailContent } from "@src/server/auth/email.js",
      //   },
      // },
    },
    // signup: {
    //   additionalFields: import setIsAdminViaEmailSignup from "@src/server/auth/setIsAdminViaEmailSignup.js",
    // },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/chat",
  },
  db: { 
    system: PostgreSQL,
    // seeds: [
    //   import { devSeedUsers } from "@src/server/scripts/usersSeed.js",
    // ]
  },
  client: {
    rootComponent: import App from "@src/client/App",
  },
  emailSender: {
    provider: SendGrid,
    defaultFrom: {
      name: "Open SaaS App",
      // make sure this address is the same you registered your SendGrid or MailGun account with!
      email: "me@example.com" 
    },
  },
  // add your dependencies here. the quickest way to find the latest version is `npm view <package-name> version`,
  webSocket: {
    fn: import { socketFn } from "@src/server/websocket/webSocket.js"
  },
}

/* üíΩ Wasp defines DB entities via Prisma Database Models: 
 * https://wasp-lang.dev/docs/data-model/entities
 */

entity User {=psl
  id                        Int             @id @default(autoincrement())
  email                     String?         @unique
  username                  String          @unique
  password                  String
  createdAt                 DateTime        @default(now())
  lastActiveTimestamp       DateTime        @default(now())
  isAdmin                   Boolean         @default(false)
  isEmailVerified           Boolean         @default(false)
  emailVerificationSentAt   DateTime?
  passwordResetSentAt       DateTime?
  stripeId                  String? 
  checkoutSessionId         String?
  hasPaid                   Boolean         @default(false)
  subscriptionTier          String?
  subscriptionStatus        String?
  sendEmail                 Boolean         @default(false)
  datePaid                  DateTime?
  credits                   Int             @default(3)
  externalAuthAssociations  SocialLogin[]
  contactFormMessages       ContactFormMessage[] 
  chats    Chat[]
  conversations    Conversation[]
psl=}

entity SocialLogin {=psl
  id                        String          @id @default(uuid())
  provider                  String
  providerId                String
  user                      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    Int
  createdAt                 DateTime        @default(now())
  @@unique([provider, providerId, userId])
psl=}



// TODO: add functionality to allow users to send messages to admin
// and make them accessible via the admin dashboard
entity ContactFormMessage {=psl
  id                        String          @id @default(uuid())
  content                   String
  user                      User            @relation(fields: [userId], references: [id])
  userId                    Int
  createdAt                 DateTime        @default(now())
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?       
psl=}

entity Chat {=psl
    id          Int     @id @default(autoincrement())
    createdAt                 DateTime        @default(now())
    updatedAt                 DateTime        @updatedAt
    team_id                   Int?
    team_name                 String?
    team_status               String?
    chatType                 String?
    proposedUserAction       String[]          @default([])
    userRespondedWithNextAction             Boolean         @default(false)
    emailContent             String?
    agentChatHistory         String?
    isExceptionOccured       Boolean         @default(false)
    showLoader  Boolean         @default(false)
    smartSuggestions  Json         @default("{ \"suggestions\": [\"\"], \"type\": \"\"}")
    streamAgentResponse Boolean         @default(false)
    customerBrief       String?
    user        User?    @relation(fields: [userId], references: [id])
    userId      Int?
    name        String?
    conversations    Conversation[]
psl=}


entity Conversation {=psl
    id                          Int             @id @default(autoincrement())
    createdAt                   DateTime        @default(now())
    updatedAt                   DateTime        @updatedAt
    message                     String
    role                        String
    agentConversationHistory    String?
    isLoading                   Boolean         @default(false)
    chat                        Chat?           @relation(fields: [chatId], references: [id])
    chatId                      Int?
    user                        User?           @relation(fields: [userId], references: [id])
    userId                      Int?

psl=}

entity DailyStats {=psl 
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique
  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float             @default(0)
  totalProfit                      Float             @default(0)
  sources                          PageViewSource[]
psl=}

entity PageViewSource {=psl
  date                     DateTime        @default(now())       
  name                     String          
  visitors                 Int             
  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?
  @@id([date, name])
psl=}

entity Logs {=psl
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())
  message                  String
  level                    String
psl=}

/* üì° These are the Wasp Routes (You can protect them easily w/ 'authRequired: true');
 * https://wasp-lang.dev/docs/tutorial/pages
 */

route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/client/landing-page/LandingPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/client/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/client/auth/SignupPage"
}

route TocPageRoute { path: "/toc", to: TocPage }
page TocPage {
  component: import TocPage from "@src/client/app/TocPage",
}
route PrivacyRoute { path: "/privacy", to: PrivacyPage }
page PrivacyPage {
  component: import PrivacyPage from "@src/client/app/PrivacyPage",
}

// route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
// page RequestPasswordResetPage {
//   component: import { RequestPasswordReset } from "@src/client/auth/RequestPasswordReset",
// }

// route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
// page PasswordResetPage {
//   component: import { PasswordReset } from "@src/client/auth/PasswordReset",
// }

// route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
// page EmailVerificationPage {
//   component: import { EmailVerification } from "@src/client/auth/EmailVerification",
// }

route ChatPageRoute { path: "/chat/:id?", to: ChatPage }
page ChatPage {
  // authRequired: true,
  component: import createAuthRequiredChatPage from "@src/client/app/ChatPage"
}

route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/client/app/PricingPage"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/client/app/AccountPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@src/client/app/CheckoutPage"
}

route AdminRoute { path: "/admin", to: DashboardPage }
page DashboardPage {
  authRequired: true,
  component: import Dashboard from "@src/client/admin/pages/DashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/client/admin/pages/Users"
}

route AdminSettingsRoute { path: "/admin/settings", to: AdminSettingsPage }
page AdminSettingsPage {
  authRequired: true,
  component: import AdminSettings from "@src/client/admin/pages/Settings"
}

route AdminChartsRoute { path: "/admin/chart", to: AdminChartsPage }
page AdminChartsPage {
  authRequired: true,
  component: import AdminCharts from "@src/client/admin/pages/Chart"
}

route AdminMessagesRoute { path: "/admin/messages", to: AdminMessagesPage }
page AdminMessagesPage {
  authRequired: true,
  component: import AdminMessages from "@src/client/admin/pages/Messages"
}

route AdminFormElementsRoute { path: "/admin/forms/form-elements", to: AdminFormElementsPage }
page AdminFormElementsPage {
  authRequired: true,
  component: import AdminForms from "@src/client/admin/pages/Form/FormElements"
}

route AdminFormLayoutsRoute { path: "/admin/forms/form-layouts", to: AdminFormLayoutsPage }
page AdminFormLayoutsPage {
  authRequired: true,
  component: import AdminForms from "@src/client/admin/pages/Form/FormLayout"
}

route AdminCalendarRoute { path: "/admin/calendar", to: AdminCalendarPage }
page AdminCalendarPage {
  authRequired: true,
  component: import AdminCalendar from "@src/client/admin/pages/Calendar"
}

route AdminUIAlertsRoute { path: "/admin/ui/alerts", to: AdminUIAlertsPage }
page AdminUIAlertsPage {
  authRequired: true,
  component: import AdminUI from "@src/client/admin/pages/UiElements/Alerts"
}

route AdminUIButtonsRoute { path: "/admin/ui/buttons", to: AdminUIButtonsPage }
page AdminUIButtonsPage {
  authRequired: true,
  component: import AdminUI from "@src/client/admin/pages/UiElements/Buttons"
}

/* ‚õë These are the Wasp Operations, which allow the client and server to interact:
 * https://wasp-lang.dev/docs/data-model/operations/overview
 */

// üìù Actions aka Mutations

action stripePayment {
  fn: import { stripePayment } from "@src/server/actions.js",
  entities: [User]
}

action updateCurrentUser {
  fn: import { updateCurrentUser } from "@src/server/actions.js",
  entities: [User]
}

action updateUserById {
  fn: import { updateUserById } from "@src/server/actions.js",
  entities: [User]
}

action createNewChat {
  fn: import { createNewChat } from "@src/server/actions.js",
  entities: [Chat, Conversation]
}

action createNewDailyAnalysisChat {
  fn: import { createNewDailyAnalysisChat } from "@src/server/actions.js",
  entities: [Chat, Conversation]
}

action updateCurrentChat {
  fn: import { updateCurrentChat } from "@src/server/actions.js",
  entities: [Chat]
}

action updateCurrentConversation {
  fn: import { updateCurrentConversation } from "@src/server/actions.js",
  entities: [Conversation]
}

action createNewAndReturnAllConversations {
  fn: import { createNewAndReturnAllConversations } from "@src/server/actions.js",
  entities: [Conversation]
}

action createNewAndReturnLastConversation {
  fn: import { createNewAndReturnLastConversation } from "@src/server/actions.js",
  entities: [Conversation]
}

action getAgentResponse {
  fn: import { getAgentResponse } from "@src/server/actions.js",
  entities: [Chat, Conversation]
}

// üìö Queries

query getDailyStats {
  fn: import { getDailyStats } from "@src/server/queries.js",
  entities: [User, DailyStats]
}

query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/server/queries.js",
  entities: [User]
}

query getChat {
  fn: import { getChat } from "@src/server/queries.js",
  entities: [Chat]
}

query getChats {
  fn: import { getChats } from "@src/server/queries.js",
  entities: [Chat]
}

query getConversations {
  fn: import { getConversations } from "@src/server/queries.js",
  entities: [Conversation]
}

/*
 * üì° These are custom Wasp API Endpoints. Use them for callbacks, webhooks, etc.
 * https://wasp-lang.dev/docs/advanced/apis
 */ 

api stripeWebhook {
  fn: import { stripeWebhook } from "@src/server/webhooks/stripe.js",
  entities: [User],
  middlewareConfigFn: import { stripeMiddlewareFn } from "@src/server/webhooks/stripe.js",
  httpRoute: (POST, "/stripe-webhook")
}

api captnDailyAnalysisWebhook {
  fn: import { captnDailyAnalysisWebhook } from "@src/server/webhooks/captn.js",
  entities: [User, Chat, Conversation],
  httpRoute: (POST, "/captn-daily-analysis-webhook")
}

api createNewChatWebhook {
  fn: import { createNewChatWebhook } from "@src/server/webhooks/captn.js",
  entities: [User, Chat],
  httpRoute: (POST, "/create-chat-webhook")
}

api deleteChatWebhook {
  fn: import { deleteChatWebhook } from "@src/server/webhooks/captn.js",
  entities: [Chat],
  httpRoute: (POST, "/delete-chat-webhook")
}

api smartSuggestionsWebHook {
  fn: import { smartSuggestionsWebHook } from "@src/server/webhooks/captn.js",
  entities: [Chat],
  httpRoute: (POST, "/smart-suggestions-webhook")
}

api migrateGoogle {
  httpRoute: (GET, "/migrate-google"),
  fn: import { migrateGoogleHandler } from "@src/migrateToNewAuth",
  entities: []
}

/* üïµÔ∏è‚Äç‚ôÇÔ∏è These are the Wasp Jobs. Use them to set up recurring tasks and/or queues:
 * https://wasp-lang.dev/docs/advanced/jobs
 */

job emailChecker {
  executor: PgBoss,
  perform: {
    fn: import { checkAndQueueEmails } from "@src/server/workers/checkAndQueueEmails.js"
  },
  schedule: {
    cron: "0 7 * * 1" // at 7:00 am every Monday
  },
  entities: [User]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/server/workers/calculateDailyStats.js"
  },
  schedule: {
    cron: "0 * * * *" // every hour. useful in production
    // cron: "* * * * *" // every minute. useful for debugging
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}
