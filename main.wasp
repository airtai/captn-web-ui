app chatApp {
  wasp: {
    version: "^0.11.7"
  },
  title: "Capt'n.ai",
  head: [
        "<meta property='og:type' content='website' />",
        "<meta property='og:url' content='' />",
        "<meta property='og:description' content='Captn AI product page' />",
        "<meta property='og:image' content='src/client/static/captn-logo-large.png' />",
        "<script type='text/javascript'> (function(l) { if (l.search[1] === '/' ) { var decoded = l.search.slice(1).split('&').map(function(s) { return s.replace(/~and~/g, '&') }).join('?'); window.history.replaceState(null, null, l.pathname.slice(0, -1) + decoded + l.hash ); } }(window.location)) </script>",
        "<script async src='https://www.googletagmanager.com/gtag/js?id=G-NQN20RRZVD'></script>",
        "<script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'G-NQN20RRZVD');</script>",
        // you can put your google analytics script here, too!
  ],
  // üîê Auth out of the box! https://wasp-lang.dev/docs/auth/overview
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      email: {
        fromField: {
          name: "SaaS App",
          // make sure this address is the same you registered your SendGrid or MailGun account with!
          email: "vince@wasp-lang.dev" 
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@server/auth/email.js",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@server/auth/email.js",
        },
      },
      google: { // Guide for setting up Auth via Google https://wasp-lang.dev/docs/auth/social-auth/overview
        getUserFieldsFn: import { getUserFields } from "@server/auth/google.js",
        configFn: import { config } from "@server/auth/google.js",
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/chat"
  },
  db: { 
    system: PostgreSQL
  },
  client: {
    rootComponent: import App from "@client/App",
  },
  emailSender: {
    provider: SendGrid,
    defaultFrom: {
      name: "SaaS App",
      // make sure this address is the same you registered your SendGrid or MailGun account with!
      email: "vince@wasp-lang.dev" 
    },
  },
  dependencies: [
    ("@headlessui/react", "1.7.13"),
    ("@tailwindcss/forms", "^0.5.3"),
    ("@tailwindcss/typography", "^0.5.7"),
    ("react-hook-form", "7.43.1"),
    ("react-icons", "4.8.0"),
    ("request-ip", "3.3.0"),
    ("@types/request-ip", "0.0.37"),
    ("node-fetch", "3.3.0"),
    ("react-hook-form", "^7.45.4"),
    ("stripe", "11.15.0"),
    ("markdown-to-jsx", "7.3.2"),
  ],
  webSocket: {
    fn: import { checkTeamStatusAndUpdateInDB } from "@server/webSocket.js"
  },
}

/* üíΩ Wasp defines DB entities via Prisma Database Models: 
 * https://wasp-lang.dev/docs/data-model/entities
 */

entity User {=psl
  id                        Int             @id @default(autoincrement())
  email                     String?         @unique
  password                  String?
  isEmailVerified           Boolean         @default(false)
  emailVerificationSentAt   DateTime?
  passwordResetSentAt       DateTime?
  stripeId                  String? 
  checkoutSessionId         String?
  hasPaid                   Boolean         @default(false)
  sendEmail                 Boolean         @default(false)
  subscriptionStatus        String?
  datePaid                  DateTime?
  credits                   Int             @default(0)
  
  externalAuthAssociations  SocialLogin[]
  chats    Chat[]
  conversations    Conversation[]
psl=}
// relatedObject             RelatedObject[] - add in line 86
entity SocialLogin {=psl
  id                        String          @id @default(uuid())
  provider                  String
  providerId                String
  user                      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                    Int
  createdAt                 DateTime        @default(now())
  @@unique([provider, providerId, userId])
psl=}

// // This can be anything. In most cases, this will be your product
// entity RelatedObject {=psl
//   id                        String          @id @default(uuid())
//   content                   String
//   user                      User            @relation(fields: [userId], references: [id])
//   userId                    Int
//   createdAt                 DateTime        @default(now())
//   updatedAt                 DateTime        @updatedAt
// psl=}

entity Chat {=psl
    id          Int     @id @default(autoincrement())
    createdAt                 DateTime        @default(now())
    updatedAt                 DateTime        @updatedAt
    team_id                   Int?
    team_name                 String?
    team_status               String?
    chatType                 String?
    proposedUserAction       String[]          @default([])
    userRespondedWithNextAction             Boolean         @default(false)
    emailContent             String?
    agentChatHistory         String?
    showLoader  Boolean         @default(false)
    smartSuggestions  Json         @default("{ \"suggestions\": [\"\"], \"type\": \"\"}")
    user        User?    @relation(fields: [userId], references: [id])
    userId      Int?
    name        String?
    conversations    Conversation[]
psl=}

entity Conversation {=psl
    id                          Int             @id @default(autoincrement())
    createdAt                   DateTime        @default(now())
    updatedAt                   DateTime        @updatedAt
    message                     String
    role                        String
    chat                        Chat?           @relation(fields: [chatId], references: [id])
    chatId                      Int?
    user                        User?           @relation(fields: [userId], references: [id])
    userId                      Int?
psl=}


/* üì° These are the Wasp Routes (You can protect them easily w/ 'authRequired: true');
 * https://wasp-lang.dev/docs/tutorial/pages
 */

route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import Main from "@client/MainPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@client/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@client/auth/RequestPasswordReset",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@client/auth/PasswordReset",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@client/auth/EmailVerification",
}

// route GptRoute { path: "/gpt", to: GptPage }
// page GptPage {
//   component: import GptPage from "@client/GptPage"
// }

route PricingRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  authRequired: true,
  component: import Pricing from "@client/PricingPage"
}

route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@client/AccountPage"
}

route CheckoutRoute { path: "/checkout", to: CheckoutPage }
page CheckoutPage {
  authRequired: true,
  component: import Checkout from "@client/CheckoutPage"
}

route ChatRoute { path: "/chat/:id?", to: ChatPage }
page ChatPage {
  authRequired: true,
  component: import Chat from "@client/ChatPage"
}

/* ‚õë These are the Wasp Operations, which allow the client and server to interact:
 * https://wasp-lang.dev/docs/data-model/operations/overview
 */

// üìù Actions aka Mutations

action stripePayment {
  fn: import { stripePayment } from "@server/actions.js",
  entities: [User]
}

action createChat {
  fn: import { createChat } from "@server/actions.js",
  entities: [Chat, Conversation]
}

action addNewConversationToChat {
  fn: import { addNewConversationToChat } from "@server/actions.js",
  entities: [Chat, Conversation]
}

action updateExistingChat {
  fn: import { updateExistingChat } from "@server/actions.js",
  entities: [Chat]
}

action getAgentResponse {
  fn: import { getAgentResponse } from "@server/actions.js",
  entities: [Chat, Conversation]
}

// action stripeCreditsPayment {
//   fn: import { stripeCreditsPayment } from "@server/actions.js",
//   entities: [User]
// }

// action updateUser {
//   fn: import { updateUser } from "@server/actions.js",
//   entities: [User]
// }

// üìö Queries

// query getRelatedObjects {
//   fn: import { getRelatedObjects } from "@server/queries.js",
//   entities: [User, RelatedObject]
// }

query getChats {
  fn: import { getChats } from "@server/queries.js",
  entities: [Chat]
}

query getChat {
  fn: import { getChat } from "@server/queries.js",
  entities: [Chat]
}

query getConversations {
  fn: import { getConversations } from "@server/queries.js",
  entities: [Conversation]
}

// query getConversations {
//   fn: import { getConversations } from "@server/queries.js",
//   entities: [Conversation]
// }

// /*
//  * üì° These are custom Wasp API Endpoints. Use them for callbacks, webhooks, etc.
//  * https://wasp-lang.dev/docs/advanced/apis
//  */ 

api stripeWebhook {
  fn: import { stripeWebhook } from "@server/webhooks.js",
  entities: [User],
  httpRoute: (POST, "/stripe-webhook")
}

api captnDailyAnalysisWebhook {
  fn: import { captnDailyAnalysisWebhook } from "@server/webhooks.js",
  entities: [User, Chat, Conversation],
  httpRoute: (POST, "/captn-daily-analysis-webhook")
}

// /* üïµÔ∏è‚Äç‚ôÇÔ∏è These are the Wasp Cron Jobs. Use them to set up recurring tasks and/or queues:
//  * https://wasp-lang.dev/docs/advanced/jobs
//  */

job emailChecker {
  executor: PgBoss,
  perform: {
    fn: import { checkAndQueueEmails } from "@server/workers/checkAndQueueEmails.js"
  },
  schedule: {
    cron: "0 7 * * 1" // at 7:00 am every Monday
  },
  entities: [User]
}
